diff --git a/rk_stream/stream_cfg/MediaInfo.cpp b/rk_stream/stream_cfg/MediaInfo.cpp
index 7f5b5dae..7167bbac 100644
--- a/rk_stream/stream_cfg/MediaInfo.cpp
+++ b/rk_stream/stream_cfg/MediaInfo.cpp
@@ -124,8 +124,8 @@ static XCamReturn get_sensor_caps(rk_sensor_full_info_t *sensor_info) {
     //get module info
     struct rkmodule_inf *minfo = &(sensor_info->mod_info);
     if(vdev.io_control(RKMODULE_GET_MODULE_INFO, minfo) < 0) {
-        LOGE_RKSTREAM("@%s %s: Get sensor module info failed", __FUNCTION__, sensor_info->device_name.c_str());
-        return XCAM_RETURN_ERROR_FAILED;
+        LOGD_RKSTREAM("@%s %s: Get sensor module info failed", __FUNCTION__, sensor_info->device_name.c_str());
+//        return XCAM_RETURN_ERROR_FAILED;
     }
     sensor_info->len_name = std::string(minfo->base.lens);
 
@@ -160,46 +160,45 @@ parse_module_info(rk_sensor_full_info_t *sensor_info)
     int parse_index = 0;
 
     if (entity_name.at(parse_index) != 'm') {
-        LOGE_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
-                        __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
+        LOGD_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
+                      __LINE__, entity_name.c_str(), parse_index);
+//        return XCAM_RETURN_ERROR_SENSOR;
+        sensor_info->module_index_str = "0";
+    } else {
+        std::string index_str = entity_name.substr (parse_index, 3);
+        sensor_info->module_index_str = index_str;
+        parse_index += 3;
     }
 
-    std::string index_str = entity_name.substr (parse_index, 3);
-    sensor_info->module_index_str = index_str;
-
-    parse_index += 3;
-
     if (entity_name.at(parse_index) != '_') {
-        LOGE_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
-                        __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
-    }
-
-    parse_index++;
+        LOGD_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
+                      __LINE__, entity_name.c_str(), parse_index);
+//        return XCAM_RETURN_ERROR_SENSOR;
+    } else
+        parse_index++;
 
     if (entity_name.at(parse_index) != 'b' &&
             entity_name.at(parse_index) != 'f') {
-        LOGE_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
-                        __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
+        LOGD_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
+                      __LINE__, entity_name.c_str(), parse_index);
+///        return XCAM_RETURN_ERROR_SENSOR;
+        sensor_info->phy_module_orient = 'f';
+    } else {
+        sensor_info->phy_module_orient = entity_name.at(parse_index);
+        parse_index++;
     }
-    sensor_info->phy_module_orient = entity_name.at(parse_index);
-
-    parse_index++;
 
     if (entity_name.at(parse_index) != '_') {
-        LOGE_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
-                        __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
-    }
-
-    parse_index++;
+        LOGD_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
+                      __LINE__, entity_name.c_str(), parse_index);
+//        return XCAM_RETURN_ERROR_SENSOR;
+    } else
+        parse_index++;
 
     std::size_t real_name_end = std::string::npos;
     if ((real_name_end = entity_name.find(' ')) == std::string::npos) {
         LOGE_RKSTREAM("%d:parse sensor entity name %s error at %d, please check sensor driver !",
-                        __LINE__, entity_name.c_str(), parse_index);
+                      __LINE__, entity_name.c_str(), parse_index);
         return XCAM_RETURN_ERROR_SENSOR;
     }
 
diff --git a/rkaiq/hwi/isp20/CamHwIsp20.cpp b/rkaiq/hwi/isp20/CamHwIsp20.cpp
index af3562a6..03148d8a 100644
--- a/rkaiq/hwi/isp20/CamHwIsp20.cpp
+++ b/rkaiq/hwi/isp20/CamHwIsp20.cpp
@@ -180,8 +180,8 @@ static XCamReturn get_sensor_caps(rk_sensor_full_info_t *sensor_info) {
     //get module info
     struct rkmodule_inf *minfo = &(sensor_info->mod_info);
     if(vdev.io_control(RKMODULE_GET_MODULE_INFO, minfo) < 0) {
-        LOGE_CAMHW_SUBM(ISP20HW_SUBM, "@%s %s: Get sensor module info failed", __FUNCTION__, sensor_info->device_name.c_str());
-        return XCAM_RETURN_ERROR_FAILED;
+        LOGD_CAMHW_SUBM(ISP20HW_SUBM, "@%s %s: Get sensor module info failed", __FUNCTION__, sensor_info->device_name.c_str());
+//        return XCAM_RETURN_ERROR_FAILED;
     }
     sensor_info->len_name = std::string(minfo->base.lens);
 
@@ -244,41 +244,40 @@ parse_module_info(rk_sensor_full_info_t *sensor_info)
     int parse_index = 0;
 
     if (entity_name.at(parse_index) != 'm') {
-        LOGE_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
+        LOGD_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
                         __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
+//        return XCAM_RETURN_ERROR_SENSOR;
+        sensor_info->module_index_str = "0";
+    } else {
+        std::string index_str = entity_name.substr (parse_index, 3);
+        sensor_info->module_index_str = index_str;
+        parse_index += 3;
     }
 
-    std::string index_str = entity_name.substr (parse_index, 3);
-    sensor_info->module_index_str = index_str;
-
-    parse_index += 3;
-
     if (entity_name.at(parse_index) != '_') {
-        LOGE_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
+        LOGD_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
                         __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
-    }
-
-    parse_index++;
+//        return XCAM_RETURN_ERROR_SENSOR;
+    } else
+        parse_index++;
 
     if (entity_name.at(parse_index) != 'b' &&
-            entity_name.at(parse_index) != 'f') {
-        LOGE_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
+        entity_name.at(parse_index) != 'f') {
+        LOGD_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
                         __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
+//        return XCAM_RETURN_ERROR_SENSOR;
+        sensor_info->phy_module_orient = 'f';
+    } else {
+        sensor_info->phy_module_orient = entity_name.at(parse_index);
+        parse_index++;
     }
-    sensor_info->phy_module_orient = entity_name.at(parse_index);
-
-    parse_index++;
 
     if (entity_name.at(parse_index) != '_') {
-        LOGE_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
+        LOGD_CAMHW_SUBM(ISP20HW_SUBM, "%d:parse sensor entity name %s error at %d, please check sensor driver !",
                         __LINE__, entity_name.c_str(), parse_index);
-        return XCAM_RETURN_ERROR_SENSOR;
-    }
-
-    parse_index++;
+//        return XCAM_RETURN_ERROR_SENSOR;
+    } else
+        parse_index++;
 
     std::size_t real_name_end = std::string::npos;
     if ((real_name_end = entity_name.find(' ')) == std::string::npos) {
